graph TB
  subgraph Users[Users/External Actors]
    Merchant[Merchant<br/>Business owner tracking cash flow]
    FinancialAnalyst[Financial Analyst<br/>Views consolidations and reports]
    LoadTester[k6 Load Tester<br/>Performance validation]
  end

  subgraph CashFlowDomain[Cash Flow Domain - Our Microservices Implementation]

    subgraph APIGateway[API Gateway Layer]
      KrakenD[KrakenD API Gateway<br/>Technology: Go<br/>Port: 8080<br/>Container Role: Entry Point<br/>Responsibilities:<br/>- Single entry point<br/>- JWT validation delegates to Keycloak<br/>- Rate limiting & CORS<br/>- Request routing to our microservices]
    end

    subgraph TransactionBoundedContext[Transaction Management - Our Core Domain Implementation]
      TransactionsAPI1[TransactionsApi Instance 1<br/>Technology: .NET 9 Web API<br/>Port: 5001 internal<br/>Container: cash-flow-transactions-1<br/>Architecture: Flows Pattern<br/>Responsibilities:<br/>- Transaction business logic<br/>- Domain event publishing<br/>- ACID transaction guarantees]

      TransactionsAPI2[TransactionsApi Instance 2<br/>Technology: .NET 9 Web API<br/>Port: 5001 internal<br/>Container: cash-flow-transactions-2<br/>Architecture: Flows Pattern<br/>Responsibilities:<br/>- Transaction business logic<br/>- Domain event publishing<br/>- ACID transaction guarantees]

      TransactionsDB[Transactions Database<br/>Technology: PostgreSQL 16<br/>Port: 5432 internal<br/>Container: transactions-db<br/>Responsibilities:<br/>- Transaction data persistence<br/>- ACID compliance<br/>- Optimized for writes]

      TxPgBouncer[Transactions PgBouncer<br/>Technology: PgBouncer<br/>Port: 6432 internal<br/>Container: pgbouncer-transactions<br/>Responsibilities:<br/>- Connection pooling<br/>- Performance optimization]
    end

    subgraph ConsolidationBoundedContext[Financial Consolidation - Our Supporting Domain Implementation]
      ConsolidationsAPI1[ConsolidationsApi Instance 1<br/>Technology: .NET 9 Web API<br/>Port: 5002 internal<br/>Container: cash-flow-consolidations-1<br/>Architecture: Repository + EF Core<br/>Responsibilities:<br/>- Daily consolidation queries<br/>- Event consumption & processing<br/>- Read-optimized operations]

      ConsolidationsAPI2[ConsolidationsApi Instance 2<br/>Technology: .NET 9 Web API<br/>Port: 5002 internal<br/>Container: cash-flow-consolidations-2<br/>Architecture: Repository + EF Core<br/>Responsibilities:<br/>- Daily consolidation queries<br/>- Event consumption & processing<br/>- Read-optimized operations]

      ConsolidationsDB[Consolidations Database<br/>Technology: PostgreSQL 16<br/>Port: 5432 internal<br/>Container: consolidations-db<br/>Responsibilities:<br/>- Aggregated data storage<br/>- Analytical query optimization<br/>- Eventual consistency]

      CoPgBouncer[Consolidations PgBouncer<br/>Technology: PgBouncer<br/>Port: 6432 internal<br/>Container: pgbouncer-consolidations<br/>Responsibilities:<br/>- Connection pooling<br/>- Query optimization]
    end

    subgraph LoadBalancing[Load Balancing Infrastructure]
      TxHAProxy[Transactions HAProxy<br/>Technology: HAProxy<br/>Port: 8080 internal<br/>Container: haproxy-transactions<br/>Responsibilities:<br/>- Load balancing TX instances<br/>- Health checks<br/>- Traffic distribution]

      CoHAProxy[Consolidations HAProxy<br/>Technology: HAProxy<br/>Port: 8080 internal<br/>Container: haproxy-consolidations<br/>Responsibilities:<br/>- Load balancing CO instances<br/>- Health checks<br/>- Traffic distribution]
    end

  end

  subgraph ExternalSystems[External Systems - Not Our Implementation]

    subgraph IdentityManagement[Identity & Access Management]
      Keycloak[Keycloak Server<br/>Technology: Keycloak Java<br/>Port: 8080 exposed<br/>Container: keycloak<br/>EXTERNAL SYSTEM<br/>Responsibilities:<br/>- OAuth2/OIDC provider<br/>- JWT token issuing<br/>- User authentication<br/>- Multi-tenant isolation]

      KeycloakDB[Keycloak Database<br/>Technology: PostgreSQL 16<br/>Port: 5432 internal<br/>Container: keycloak-db<br/>Responsibilities:<br/>- User data storage<br/>- Session management<br/>- Role & permission data]
    end

    subgraph ObservabilityStack[Observability & Monitoring]
      Prometheus[Prometheus<br/>Technology: Prometheus<br/>Port: 9090 exposed<br/>Container: prometheus<br/>EXTERNAL TOOL<br/>Responsibilities:<br/>- Metrics collection & storage<br/>- Alerting rules<br/>- Time-series database]

      Grafana[Grafana<br/>Technology: Grafana<br/>Port: 3000 exposed<br/>Container: grafana<br/>EXTERNAL TOOL<br/>Responsibilities:<br/>- Metrics visualization<br/>- Dashboard management<br/>- Alert notifications]
    end

    subgraph EventInfrastructure[Event-Driven Integration]
      RabbitMQ[RabbitMQ Message Broker<br/>Technology: RabbitMQ Erlang<br/>Port: 5672/15672<br/>Container: rabbitmq<br/>EXTERNAL INFRASTRUCTURE<br/>Responsibilities:<br/>- Event-driven integration<br/>- Message persistence & routing<br/>- Dead letter queue handling]
    end

  end

  %% User interactions - Entry via Gateway
  Merchant -.->|"HTTPS/REST API calls<br/>JWT Bearer token required"| KrakenD
  FinancialAnalyst -.->|"HTTPS/REST API calls<br/>JWT Bearer token required"| KrakenD
  LoadTester -.->|"Performance testing<br/>Multiple concurrent connections"| KrakenD

  %% Gateway routing to our microservices
  KrakenD -->|"POST /api/v1/merchants/{id}/transactions<br/>Routes to Transaction context"| TxHAProxy
  KrakenD -->|"GET /api/v1/merchants/{id}/consolidations<br/>Routes to Consolidation context"| CoHAProxy

  %% Load balancing to our API instances
  TxHAProxy --> TransactionsAPI1
  TxHAProxy --> TransactionsAPI2
  CoHAProxy --> ConsolidationsAPI1
  CoHAProxy --> ConsolidationsAPI2

  %% Data access within our contexts
  TransactionsAPI1 --> TxPgBouncer
  TransactionsAPI2 --> TxPgBouncer
  TxPgBouncer --> TransactionsDB

  ConsolidationsAPI1 --> CoPgBouncer
  ConsolidationsAPI2 --> CoPgBouncer
  CoPgBouncer --> ConsolidationsDB

  %% Domain integration - Event-driven between our contexts
  TransactionsAPI1 -.->|"Publishes TransactionCreated events<br/>Domain integration"| RabbitMQ
  TransactionsAPI2 -.->|"Publishes TransactionCreated events<br/>Domain integration"| RabbitMQ
  RabbitMQ -.->|"Delivers events to consumers<br/>Async processing"| ConsolidationsAPI1
  RabbitMQ -.->|"Delivers events to consumers<br/>Async processing"| ConsolidationsAPI2

  %% External dependencies
  KrakenD -.->|"JWT validation<br/>OAuth2 delegation"| Keycloak
  Keycloak --> KeycloakDB

  Prometheus -.->|"Scrapes /metrics endpoints<br/>from our microservices"| TransactionsAPI1 & TransactionsAPI2
  Prometheus -.->|"Scrapes /metrics endpoints<br/>from our microservices"| ConsolidationsAPI1 & ConsolidationsAPI2
  Prometheus -.->|"Scrapes infrastructure metrics"| KrakenD & TxHAProxy & CoHAProxy
  Grafana --> Prometheus

  %% Styling for C4 Level 2 - Container View (Real Implementation)
  classDef user fill:#e8f4fd,stroke:#1976d2,stroke-width:2px
  classDef gateway fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px
  classDef ourMicroservice fill:#e8f5e8,stroke:#2e7d32,stroke-width:3px
  classDef ourDatabase fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
  classDef ourInfrastructure fill:#fff3e0,stroke:#f57c00,stroke-width:2px
  classDef externalSystem fill:#f5f5f5,stroke:#616161,stroke-width:2px
  classDef externalInfra fill:#ffebee,stroke:#d32f2f,stroke-width:2px

  class Merchant,FinancialAnalyst,LoadTester user
  class KrakenD gateway
  class TransactionsAPI1,TransactionsAPI2,ConsolidationsAPI1,ConsolidationsAPI2 ourMicroservice
  class TransactionsDB,ConsolidationsDB ourDatabase
  class TxPgBouncer,CoPgBouncer,TxHAProxy,CoHAProxy ourInfrastructure
  class Keycloak,KeycloakDB,Prometheus,Grafana externalSystem
  class RabbitMQ externalInfra