# Makefile para gerenciar o Sistema de Fluxo de Caixa

# Vari√°veis
DOCKER_COMPOSE = docker-compose
PROJECT_NAME = cash-flow-system

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[0;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help build up down restart logs clean test status generate-migrations

# Comando padr√£o
all: help

# Ajuda
help:
	@echo "$(GREEN)Sistema de Gest√£o de Fluxo de Caixa$(NC)"
	@echo "================================================"
	@echo ""
	@echo "$(YELLOW)Comandos dispon√≠veis:$(NC)"
	@echo "  make build          - Constr√≥i as imagens Docker"
	@echo "  make up             - Inicia todos os servi√ßos"
	@echo "  make down           - Para e remove todos os servi√ßos"
	@echo "  make restart        - Reinicia todos os servi√ßos"
	@echo "  make logs           - Mostra logs de todos os servi√ßos"
	@echo "  make logs-api       - Mostra logs das APIs"
	@echo "  make logs-infra     - Mostra logs da infraestrutura"
	@echo "  make logs-gateway   - Mostra logs do Gateway e Load Balancer"
	@echo "  make status         - Mostra status dos containers"
	@echo "  make generate-migrations - Gera novas migrations do Entity Framework"
	@echo "  make test           - Executa testes unit√°rios"
	@echo "  make clean          - Remove volumes e limpa o ambiente"
	@echo "  make dev-infra      - Inicia apenas infraestrutura (DBs + RabbitMQ)"
	@echo "  make dev-apis       - Inicia apenas as APIs"
	@echo "  make health         - Verifica sa√∫de dos servi√ßos"
	@echo ""

# Construir imagens
build:
	@echo "$(GREEN)üî® Construindo imagens Docker...$(NC)"
	$(DOCKER_COMPOSE) build --no-cache

# Iniciar todos os servi√ßos
up:
	@echo "$(GREEN)üöÄ Iniciando todos os servi√ßos...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Servi√ßos iniciados!$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä Migrations s√£o aplicadas automaticamente na inicializa√ß√£o das APIs$(NC)"
	@echo ""
	@echo "$(YELLOW)URLs dispon√≠veis:$(NC)"
	@echo "  üåê API Gateway (KrakenD):      http://localhost:8000"
	@echo "  üîê Keycloak Admin Console:     http://localhost:8080 (admin/admin123)"
	@echo "  üìä HAProxy Stats:              http://localhost:8081"
	@echo "  üìà KrakenD Metrics:            http://localhost:8090"
	@echo "  üê∞ RabbitMQ Management:        http://localhost:15672 (guest/guest)"
	@echo ""
	@echo "$(YELLOW)Endpoints via Gateway:$(NC)"
	@echo "  POST /transactions/{merchant_id}/transactions"
	@echo "  GET  /consolidations/{merchant_id}/daily?date=YYYY-MM-DD"
	@echo ""
	@make status

# Parar todos os servi√ßos
down:
	@echo "$(RED)üõë Parando todos os servi√ßos...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Servi√ßos parados!$(NC)"

# Reiniciar servi√ßos
restart: down up

# Ver logs
logs:
	@echo "$(YELLOW)üìã Logs de todos os servi√ßos:$(NC)"
	$(DOCKER_COMPOSE) logs -f

# Logs apenas das APIs
logs-api:
	@echo "$(YELLOW)üìã Logs das APIs:$(NC)"
	$(DOCKER_COMPOSE) logs -f transactions-api-1 transactions-api-2 consolidations-api-1 consolidations-api-2

# Logs apenas da infraestrutura
logs-infra:
	@echo "$(YELLOW)üìã Logs da infraestrutura:$(NC)"
	$(DOCKER_COMPOSE) logs -f transactions-db consolidations-db rabbitmq

# Logs do Gateway e Load Balancer
logs-gateway:
	@echo "$(YELLOW)üìã Logs Gateway e Load Balancer:$(NC)"
	$(DOCKER_COMPOSE) logs -f krakend haproxy

# Status dos containers
status:
	@echo "$(YELLOW)üìä Status dos containers:$(NC)"
	$(DOCKER_COMPOSE) ps

# Gerar novas migrations do Entity Framework
generate-migrations:
	@echo "$(GREEN)üìä Gerando migrations do Entity Framework...$(NC)"
	@echo "$(YELLOW)Verificando ferramentas do Entity Framework...$(NC)"
	@if ! dotnet tool list -g | grep -q "dotnet-ef"; then \
		echo "Instalando dotnet-ef globalmente..."; \
		dotnet tool install --global dotnet-ef; \
	fi
	@echo "$(YELLOW)Gerando migration para TransactionsApi...$(NC)"
	@cd src/TransactionsApi && dotnet ef migrations add Migration_$(shell date +%Y%m%d_%H%M%S) --verbose
	@echo "$(YELLOW)Gerando migration para ConsolidationsApi...$(NC)"
	@cd src/ConsolidationsApi && dotnet ef migrations add Migration_$(shell date +%Y%m%d_%H%M%S) --verbose
	@echo "$(GREEN)‚úÖ Migrations geradas com sucesso!$(NC)"
	@echo "$(YELLOW)üí° As migrations ser√£o aplicadas automaticamente quando as APIs subirem$(NC)"

# Executar testes
test:
	@echo "$(GREEN)üß™ Executando testes unit√°rios...$(NC)"
	@dotnet test tests/TransactionsApi.Tests/ --verbosity minimal
	@dotnet test tests/ConsolidationsApi.Tests/ --verbosity minimal

# Limpar ambiente
clean: down
	@echo "$(RED)üßπ Limpando volumes e imagens...$(NC)"
	$(DOCKER_COMPOSE) down -v --remove-orphans
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Ambiente limpo!$(NC)"

# Desenvolvimento - apenas infraestrutura
dev-infra:
	@echo "$(GREEN)üîß Iniciando apenas infraestrutura...$(NC)"
	$(DOCKER_COMPOSE) up -d transactions-db consolidations-db rabbitmq
	@echo "$(GREEN)‚úÖ Infraestrutura iniciada!$(NC)"
	@echo ""
	@echo "$(YELLOW)Para executar as APIs localmente:$(NC)"
	@echo "  cd src/TransactionsApi && dotnet run"
	@echo "  cd src/ConsolidationsApi && dotnet run"

# Desenvolvimento - apenas APIs
dev-apis:
	@echo "$(GREEN)üîß Iniciando apenas as APIs...$(NC)"
	$(DOCKER_COMPOSE) up -d transactions-api consolidations-api
	@echo "$(GREEN)‚úÖ APIs iniciadas!$(NC)"

# Verificar sa√∫de dos servi√ßos
health:
	@echo "$(YELLOW)üè• Verificando sa√∫de dos servi√ßos...$(NC)"
	@echo ""
	@echo "TransactionsApi:"
	@curl -s http://localhost:5001/health || echo "‚ùå TransactionsApi indispon√≠vel"
	@echo ""
	@echo "ConsolidationsApi:"
	@curl -s http://localhost:5002/health || echo "‚ùå ConsolidationsApi indispon√≠vel"
	@echo ""

# Comandos avan√ßados

# Backup dos bancos
backup:
	@echo "$(GREEN)üíæ Fazendo backup dos bancos...$(NC)"
	@mkdir -p backups
	@docker exec transactions-db pg_dump -U postgres transactions_db > backups/transactions_$(shell date +%Y%m%d_%H%M%S).sql
	@docker exec consolidations-db pg_dump -U postgres consolidations_db > backups/consolidations_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup conclu√≠do!$(NC)"

# Mostrar estat√≠sticas dos containers
stats:
	@echo "$(YELLOW)üìà Estat√≠sticas dos containers:$(NC)"
	@docker stats --no-stream $(shell docker-compose ps -q)

# Limpar apenas containers parados
clean-containers:
	@echo "$(YELLOW)üßπ Removendo containers parados...$(NC)"
	@docker container prune -f

# Rebuild espec√≠fico de um servi√ßo
rebuild-%:
	@echo "$(GREEN)üî® Reconstruindo $*...$(NC)"
	$(DOCKER_COMPOSE) build --no-cache $*
	$(DOCKER_COMPOSE) up -d $*

# Exemplo de uso: make curl-create-transaction MERCHANT_ID=merchant-123
curl-create-transaction:
	@echo "$(GREEN)üîó Criando transa√ß√£o de exemplo...$(NC)"
	@curl -X POST "http://localhost:5001/api/v1/merchants/$(MERCHANT_ID)/transactions" \
		-H "Content-Type: application/json" \
		-d '{"type": "CREDITO", "amount": 100.50, "description": "Transa√ß√£o de teste"}' | jq .

# Exemplo de uso: make curl-get-consolidation MERCHANT_ID=merchant-123 DATE=2024-01-15
curl-get-consolidation:
	@echo "$(GREEN)üîó Consultando consolida√ß√£o...$(NC)"
	@curl -X GET "http://localhost:8000/consolidations/$(MERCHANT_ID)/daily?date=$(DATE)" | jq .

# Teste via Gateway - Criar transa√ß√£o
gateway-create-transaction:
	@echo "$(GREEN)üåê Criando transa√ß√£o via Gateway...$(NC)"
	@curl -X POST "http://localhost:8000/transactions/$(MERCHANT_ID)/transactions" \
		-H "Content-Type: application/json" \
		-d '{"type": "CREDITO", "amount": 100.50, "description": "Teste via Gateway"}' | jq .

# Teste via Gateway - Consultar consolida√ß√£o
gateway-get-consolidation:
	@echo "$(GREEN)üåê Consultando consolida√ß√£o via Gateway...$(NC)"
	@curl -X GET "http://localhost:8000/consolidations/$(MERCHANT_ID)/daily?date=$(DATE)" | jq .

# Teste de Performance/Load Test
load-test:
	@echo "$(GREEN)‚ö° Executando teste de carga...$(NC)"
	@echo "Criando 10 transa√ß√µes simult√¢neas..."
	@for i in {1..10}; do \
		curl -X POST "http://localhost:8000/transactions/load-test-$$i/transactions" \
			-H "Content-Type: application/json" \
			-d '{"type": "CREDITO", "amount": '$$i'0.00, "description": "Load test $$i"}' & \
	done; wait
	@echo "$(GREEN)‚úÖ Teste de carga conclu√≠do!$(NC)"